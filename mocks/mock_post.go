// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gjbastidas/GoSimpleAPIWithMongoDB/models (interfaces: Post)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/gjbastidas/GoSimpleAPIWithMongoDB/models"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockPost is a mock of Post interface.
type MockPost struct {
	ctrl     *gomock.Controller
	recorder *MockPostMockRecorder
}

// MockPostMockRecorder is the mock recorder for MockPost.
type MockPostMockRecorder struct {
	mock *MockPost
}

// NewMockPost creates a new mock instance.
func NewMockPost(ctrl *gomock.Controller) *MockPost {
	mock := &MockPost{ctrl: ctrl}
	mock.recorder = &MockPostMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPost) EXPECT() *MockPostMockRecorder {
	return m.recorder
}

// CreateOneRecord mocks base method.
func (m *MockPost) CreateOneRecord(arg0 *mongo.Client, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOneRecord", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOneRecord indicates an expected call of CreateOneRecord.
func (mr *MockPostMockRecorder) CreateOneRecord(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOneRecord", reflect.TypeOf((*MockPost)(nil).CreateOneRecord), arg0, arg1, arg2)
}

// DeleteOneRecord mocks base method.
func (m *MockPost) DeleteOneRecord(arg0 *mongo.Client, arg1 primitive.ObjectID, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteOneRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteOneRecord indicates an expected call of DeleteOneRecord.
func (mr *MockPostMockRecorder) DeleteOneRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteOneRecord", reflect.TypeOf((*MockPost)(nil).DeleteOneRecord), arg0, arg1, arg2, arg3)
}

// ReadOneRecord mocks base method.
func (m *MockPost) ReadOneRecord(arg0 *mongo.Client, arg1 primitive.ObjectID, arg2, arg3 string) (*models.PostDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadOneRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.PostDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadOneRecord indicates an expected call of ReadOneRecord.
func (mr *MockPostMockRecorder) ReadOneRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadOneRecord", reflect.TypeOf((*MockPost)(nil).ReadOneRecord), arg0, arg1, arg2, arg3)
}

// UpdateOneRecord mocks base method.
func (m *MockPost) UpdateOneRecord(arg0 *mongo.Client, arg1 primitive.ObjectID, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOneRecord", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOneRecord indicates an expected call of UpdateOneRecord.
func (mr *MockPostMockRecorder) UpdateOneRecord(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOneRecord", reflect.TypeOf((*MockPost)(nil).UpdateOneRecord), arg0, arg1, arg2, arg3)
}
