// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/gjbastidas/GoSimpleAPIWithMongoDB/models (interfaces: Comment)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/gjbastidas/GoSimpleAPIWithMongoDB/models"
	gomock "github.com/golang/mock/gomock"
	primitive "go.mongodb.org/mongo-driver/bson/primitive"
	mongo "go.mongodb.org/mongo-driver/mongo"
)

// MockComment is a mock of Comment interface.
type MockComment struct {
	ctrl     *gomock.Controller
	recorder *MockCommentMockRecorder
}

// MockCommentMockRecorder is the mock recorder for MockComment.
type MockCommentMockRecorder struct {
	mock *MockComment
}

// NewMockComment creates a new mock instance.
func NewMockComment(ctrl *gomock.Controller) *MockComment {
	mock := &MockComment{ctrl: ctrl}
	mock.recorder = &MockCommentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockComment) EXPECT() *MockCommentMockRecorder {
	return m.recorder
}

// CreateComment mocks base method.
func (m *MockComment) CreateComment(arg0 *mongo.Client, arg1, arg2 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateComment", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateComment indicates an expected call of CreateComment.
func (mr *MockCommentMockRecorder) CreateComment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateComment", reflect.TypeOf((*MockComment)(nil).CreateComment), arg0, arg1, arg2)
}

// DeleteComment mocks base method.
func (m *MockComment) DeleteComment(arg0 *mongo.Client, arg1 primitive.ObjectID, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteComment indicates an expected call of DeleteComment.
func (mr *MockCommentMockRecorder) DeleteComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteComment", reflect.TypeOf((*MockComment)(nil).DeleteComment), arg0, arg1, arg2, arg3)
}

// ReadComment mocks base method.
func (m *MockComment) ReadComment(arg0 *mongo.Client, arg1 primitive.ObjectID, arg2, arg3 string) (*models.CommentDoc, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReadComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*models.CommentDoc)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ReadComment indicates an expected call of ReadComment.
func (mr *MockCommentMockRecorder) ReadComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadComment", reflect.TypeOf((*MockComment)(nil).ReadComment), arg0, arg1, arg2, arg3)
}

// UpdateComment mocks base method.
func (m *MockComment) UpdateComment(arg0 *mongo.Client, arg1 primitive.ObjectID, arg2, arg3 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateComment", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateComment indicates an expected call of UpdateComment.
func (mr *MockCommentMockRecorder) UpdateComment(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateComment", reflect.TypeOf((*MockComment)(nil).UpdateComment), arg0, arg1, arg2, arg3)
}
